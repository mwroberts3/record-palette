// VARIABLES & SWITCHES
const playerName = document.querySelector(".player-name");
const playerLevel = document.querySelector(".player-level");
const playerExp = document.querySelector(".total-experience");
const playerExpToNextLevel = document.querySelector(
  ".experience-to-next-level"
);
const playerGuiltFreeFunds = document.querySelector(".guilt-free-funds");

const deliberationCheck = document.querySelector(".deliberation-check");
const resistanceCheck = document.querySelector(".resistance-check");
const noveltyCheck = document.querySelector(".novelty-check");
const submitSM = document.querySelector(".submit-button");

let moveData = [
  { check: "deliberation", value: 0 },
  { check: "resistance", value: 0 },
  { check: "novelty", value: 0 },
];

let expGained = 100;

// INDEX - STATS DISPLAY / realtime listener
const snapshotTest = db.collection("moves").onSnapshot((snapshot) => {
  console.log(snapshot);
  snapshot.docChanges().forEach((change) => {
    console.log(change.type);
    if (change.type === "added") {
    }
  });
  displayStats(mike);
});
// don't think this realtime listener is really doing anything, because it's only trying to listen for changes to an existing document, not whether documents are being created or deleted

const displayStats = (name) => {
  playerName.textContent = name.name;
  playerLevel.textContent = name.level;
  playerExp.textContent = name.experience;
  playerExpToNextLevel.textContent = name.expToNext;
  playerGuiltFreeFunds.textContent = `$${name.guiltFreeFunds}`;
};

console.log(db);

// ADD SOCIAL MOVES
deliberationCheck.addEventListener("click", (e) => {
  if (e.target.classList.contains("del-check-yes")) {
    e.target.classList.toggle("selected-one");
    // console.log(e);
    // console.log(e.target.parentElement.childNodes);
    moveData[0].value = 0.75;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-one") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-one");
      }
    });
    // the above checks if each childNode of parent is not a text object, contains the selected class and is not the div that was just clicked. This logic applies to the whole 'Add Social Moves' section, albeit individually

    // console.log("no deliberation x1.25");
  } else if (e.target.classList.contains("del-check-no")) {
    e.target.classList.toggle("selected-one");
    moveData[0].value = 1.25;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-one") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-one");
      }
    });
    console.log(e);
    // console.log("there was deliberation x0.75");
  }
  if (deliberationCheck.querySelectorAll(".selected-one").length === 0) {
    moveData[0]["value"] = 0;
    console.log("no deliberation selected");
  }
});

resistanceCheck.addEventListener("click", (e) => {
  if (e.target.classList.contains("res-check-1")) {
    e.target.classList.toggle("selected-two");
    moveData[1].value = 1;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-two") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-two");
      }
    });
    // console.log("resistance level 1 x1");
  } else if (e.target.classList.contains("res-check-2")) {
    e.target.classList.toggle("selected-two");
    moveData[1].value = 1.75;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-two") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-two");
      }
    });
    // console.log("resistance level 2 x1.75");
  } else if (e.target.classList.contains("res-check-3")) {
    e.target.classList.toggle("selected-two");
    moveData[1].value = 2.5;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-two") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-two");
      }
    });
    // console.log("resistance level 3 x2.5");
  }
  if (resistanceCheck.querySelectorAll(".selected-two").length === 0) {
    moveData[1]["value"] = 0;
    console.log("no resistance selected");
  }
});

noveltyCheck.addEventListener("click", (e) => {
  if (e.target.classList.contains("nov-check-1")) {
    e.target.classList.toggle("selected-two");
    moveData[2].value = 0.9;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-two") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-two");
      }
    });
    // console.log("novelty level 1 x0.9");
  } else if (e.target.classList.contains("nov-check-2")) {
    e.target.classList.toggle("selected-two");
    moveData[2].value = 1.2;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-two") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-two");
      }
    });
    // console.log("novelty level 2 x1.3");
  } else if (e.target.classList.contains("nov-check-3")) {
    e.target.classList.toggle("selected-two");
    moveData[2].value = 1.4;

    e.target.parentElement.childNodes.forEach((child) => {
      if (
        child.nodeType !== 3 &&
        child.classList.contains("selected-two") &&
        child !== e.target
      ) {
        console.log("selected!");
        child.classList.toggle("selected-two");
      }
    });
    // console.log("novelty level 3 x1.4");
  }
  if (noveltyCheck.querySelectorAll(".selected-two").length === 0) {
    moveData[2]["value"] = 0;
    console.log("no deliberation selected");
  }
});

submitSM.addEventListener("click", () => {
  moveData.forEach((row) => {
    if (row.value === "") {
      console.log("missing", row.check);
    }
  });
  addData();
});

function addData() {
  expGained *= moveData[0].value;
  expGained *= moveData[1].value;
  expGained *= moveData[2].value;

  const now = new Date();
  db.collection("moves")
    .add({
      a_deliberation: moveData[0],
      b_resistance: moveData[1],
      c_novelty: moveData[2],
      d_experience: expGained,
      e_time: firebase.firestore.Timestamp.fromDate(now),
    })
    .then(() => {
      console.log(mike);
      currentPlayer.update({
        experience: Math.round(mike.experience + expGained),
      });
      mike.experience = Math.round(mike.experience + expGained);
      if (mike.experience > mike.expToNext) {
        mike.levelUp();
      } else {
        location.reload();
      }
    })
    .catch((err) => {
      console.log("error grabbing document", err);
    });
}
